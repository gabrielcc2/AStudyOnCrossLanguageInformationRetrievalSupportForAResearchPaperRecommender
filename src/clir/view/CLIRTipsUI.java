package clir.view;

import java.awt.Desktop;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.WindowEvent;
import java.io.IOException;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.ActionMap;
import javax.swing.AbstractAction;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.KeyStroke;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Document;
import javax.swing.text.JTextComponent;
import javax.swing.text.html.HTMLEditorKit;
import javax.swing.undo.CannotUndoException;
import javax.swing.undo.UndoManager;

import clir.control.mgmt.LanguagesManager;
import clir.control.mgmt.RecommendationsHandler;
import clir.model.QueryTerms;
import clir.model.ResultsList;


// TODO: Auto-generated Javadoc
/**
 * Main interface of the GUI, it consists of a tabbed pane with 2 tabs: Recommendations, Settings and About.
 * 
 * Most of the code is for configuring the interface. The functions embodying most the use for the recommender
 * can be found outside of initComponents(). 
 * 
 * The visual aspects were developed with the help of NetBeans IDE for JSwing. However the code
 * required plenty of changes and adaptations.
 * 
 * @author Gabriel
 */
@SuppressWarnings("serial")
public class CLIRTipsUI extends javax.swing.JFrame {
	
	/*Language */
	/** The interface language. */
	private String interfaceLanguage; //English by default
	
	/** The query folder. */
	private String queryFolder="DEFAULT";
	
	/** CLIR variables. */
	ResultsList recommendations;
	
    /**
     * Creates new form CodeSearchUI.
     */
    public CLIRTipsUI() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
    	interfaceLanguage="EN";//English by default
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        LanguagesManager.getInstance().addLanguage("EN");
		LanguagesManager.getInstance().addLanguage("ES");
		LanguagesManager.getInstance().addLanguage("DE");
		
		recommendations= new ResultsList();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    @SuppressWarnings({ "rawtypes", "unchecked" })
	private void initComponents() {    	
    	/**We call the constructors of all the components...*/
          currentQueryFolderLabel = new javax.swing.JLabel();
          jPanel1 = new javax.swing.JPanel();
          jTabbedPane1 = new javax.swing.JTabbedPane();
          jPanel3 = new javax.swing.JPanel();
          getRecommendationsButton = new javax.swing.JButton();
          resultsLabel = new javax.swing.JLabel();
          jScrollPane2 = new javax.swing.JScrollPane();
          resultsTextArea = new javax.swing.JTextPane();
          jLabel12 = new javax.swing.JLabel();
          jLabel17 = new javax.swing.JLabel();
          jSpinner2 = new javax.swing.JSpinner();
          queryInGerman = new javax.swing.JRadioButton();
          queryInEnglish = new javax.swing.JRadioButton();
          queryInSpanish = new javax.swing.JRadioButton();
          resultsInGerman = new javax.swing.JRadioButton();
          resultsInEnglish = new javax.swing.JRadioButton();
          resultsInSpanish = new javax.swing.JRadioButton();
          refineRecommendationsButton = new javax.swing.JButton();
          jCheckBox2 = new javax.swing.JCheckBox();
          jPanel5 = new javax.swing.JPanel();
          jScrollPane3 = new javax.swing.JScrollPane();
          jTextArea2 = new javax.swing.JTextArea();
          jPanel2 = new javax.swing.JPanel();
          jButton3 = new javax.swing.JButton();
          jButton5 = new javax.swing.JButton();
          jButton7 = new javax.swing.JButton();
          interfaceLanguageSelectorComboBox1 = new javax.swing.JComboBox();
          jLabel7 = new javax.swing.JLabel();
          refreshGermanIndexButton = new javax.swing.JButton();
          refreshLSIButton = new javax.swing.JButton();
          refreshSpanishIndexButton = new javax.swing.JButton();
          refreshEnglishIndexButton = new javax.swing.JButton();
          jPanel4 = new javax.swing.JPanel();
          jLabel1 = new javax.swing.JLabel();
          jLabel2 = new javax.swing.JLabel();

          /**General configuration*/
          setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
          setTitle("CLIR Tips");
          /**Configuration for elements of Get Recommendations tab*/
          if (interfaceLanguage.equals("DE")){
        	  qfu="Abfrageordner:";
        	  results= "Ergebnisse";
        	  sourceLangs="Ausgangssprachen:";
        	  resultingQfu="Default";
        	  targetLangs="Zielsprachen:";
        	  getRec="Empfehlungen bekommen";
        	  german="Deutsch";
        	  english="Englisch";
        	  spanish="Spanisch";
        	  refine="Verfeinerung der Abfrage";
        	  uselsi="Verwenden LSI";
        	  resultsText="Keine Empfehlungen gefunden.";
          }
          else if (interfaceLanguage.equals("ES")){
        	  qfu="Directorio utilizado para la búsqueda:";
        	  results= "Resultados";
              sourceLangs="Lenguajes originales:";
              resultingQfu="Directorio por defecto";
        	  targetLangs="Languajes meta:";
        	  getRec="Obtener recomendaciones";
        	  german="Alemán";
        	  english="Inglés";
        	  spanish="Español";
        	  refine="Refinar la búsqueda";
        	  uselsi="Usar LSI";
        	  resultsText="No se encontraron recomendaciones.";
          }
          else{
        	  qfu="Query folder:";
        	  results= "Results";
              sourceLangs="Source langugages:";
              resultingQfu="Default";
        	  targetLangs="Target languages:";
        	  getRec="Get recommendations";
        	  german="German";
        	  english="English";
        	  spanish="Spanish";
        	  refine="Refine query terms";
        	  uselsi="Use LSI";
        	  resultsText="No recommendations found.";
          }
          resultsLabel.setText(results+" | "+qfu+" "+resultingQfu);
          currentQueryFolderLabel.setText(qfu+" "+resultingQfu);
          jLabel17.setText(targetLangs);
          jLabel12.setText(sourceLangs);
          jScrollPane2.setViewportView(resultsTextArea);
          resultsTextArea.setText(resultsText);
          queryInGerman.setText(german);
          queryInEnglish.setText(english);
          queryInSpanish.setText(spanish);
          jCheckBox2.setText(uselsi);
          refineRecommendationsButton.setText(refine);
          getRecommendationsButton.setText(getRec);
          resultsInSpanish.setText(spanish);
          resultsInEnglish.setText(english);
          resultsInGerman.setText(german);
          
          refineRecommendationsButton.setEnabled(false);
          resultsTextArea.setEditable(false);
      	  ((DefaultCaret) resultsTextArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
      	  HTMLEditorKit kit = new HTMLEditorKit();
          resultsTextArea.setEditorKit(kit);
          resultsTextArea.setDocument(kit.createDefaultDocument());
          resultsTextArea.setContentType("text/html");
          
          resultsTextArea.addMouseListener(new MouseAdapter() {  //Allowing to copy text...
              public void mouseReleased(final MouseEvent e) { 
                  if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
                  	){  
                  	final JTextComponent component = (JTextComponent)e.getComponent(); 
                      final JPopupMenu menu = new JPopupMenu();  
                      JMenuItem item;  
                      item = new JMenuItem(new DefaultEditorKit.CopyAction());
                      if (interfaceLanguage.equals("DE")){
                    	  item.setText("Text kopieren...");  
                      }
                      else if (interfaceLanguage.equals("ES")){
                    	  item.setText("Copiar texto...");  
                      }
                      else {
                    	  item.setText("Copy text...");  
                      }
                      item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
                      menu.add(item);  
                      menu.show(e.getComponent(), e.getX(), e.getY());  
                  }  
              }                        
          });  

          resultsTextArea.addHyperlinkListener(new HyperlinkListener(){//Allowing to open a browser by clicking in the url
        	  public void hyperlinkUpdate(HyperlinkEvent e) {
        		  if (e.getEventType() == HyperlinkEvent.EventType.ACTIVATED) {
        			  try {
        				  Desktop.getDesktop().browse(e.getURL().toURI());
        			  } catch (IOException | URISyntaxException e1) {
        				  e1.printStackTrace();
        			  }
        		  }
        	  	}
          	   });
          
          queryInGerman.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jRadioButton1ActionPerformed(evt);
              }
          });

          queryInEnglish.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jRadioButton2ActionPerformed(evt);
              }
          });

          queryInSpanish.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jRadioButton3ActionPerformed(evt);
              }
          });
          
          resultsInGerman.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jRadioButton4ActionPerformed(evt);
              }
          });

          	resultsInEnglish.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jRadioButton5ActionPerformed(evt);
              }
          });

          	resultsInSpanish.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jRadioButton6ActionPerformed(evt);
              }
          });
          
          getRecommendationsButton.setRequestFocusEnabled(false);
          getRecommendationsButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  getRecommendations(evt);
              }
          });
          refineRecommendationsButton.setRequestFocusEnabled(false);
          refineRecommendationsButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  refineRecommendations(evt);
              }
          });

          jCheckBox2.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jCheckBox2ActionPerformed(evt);
              }
          });
          
          /**Visual configuration for Panel with "Get Recommendations tab" */

          javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
          jPanel3.setLayout(jPanel3Layout);
          jPanel3Layout.setHorizontalGroup(
              jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(jPanel3Layout.createSequentialGroup()
                          .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
                          .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(jPanel3Layout.createSequentialGroup()
                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                  .addComponent(refineRecommendationsButton))
                              .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                  .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                      .addGap(18, 18, 18)
                                      .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                          .addComponent(jLabel12)
                                          .addComponent(jLabel17)
                                          .addComponent(queryInGerman)
                                          .addComponent(queryInEnglish)
                                          .addComponent(queryInSpanish)
                                          .addComponent(resultsInGerman)
                                          .addComponent(resultsInEnglish)
                                          .addComponent(resultsInSpanish)
                                          .addComponent(jCheckBox2)))
                                  .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                                      .addGap(12, 12, 12)
                                      .addComponent(getRecommendationsButton)))))
                      .addComponent(resultsLabel))
                  .addGap(56, 56, 56))
          );
          jPanel3Layout.setVerticalGroup(
              jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel3Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(resultsLabel)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(jPanel3Layout.createSequentialGroup()
                          .addComponent(jLabel12)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                          .addComponent(queryInGerman)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                          .addComponent(queryInEnglish)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                          .addComponent(queryInSpanish)
                          .addGap(28, 28, 28)
                          .addComponent(jLabel17)
                          .addGap(18, 18, 18)
                          .addComponent(resultsInGerman)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                          .addComponent(resultsInEnglish)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                          .addComponent(resultsInSpanish)
                          .addGap(30, 30, 30)
                          .addComponent(jCheckBox2)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                          .addComponent(getRecommendationsButton)
                          .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                          .addComponent(refineRecommendationsButton))
                      .addComponent(jScrollPane2))
                  .addGap(17, 17, 17))
          );          jTabbedPane1.addTab(getRec, jPanel3);

          
          /**Configuration for elements of Settings tab*/

          if (interfaceLanguage.equals("DE")){
        	  usedefaultqf="Verwenden den Defaultabfrageordner";
        	  refresh="Aktualisieren Sie die ";
        	  submit="Annehmen";
        	  saqf="Wählen Sie ein anderes Abfrageordner";
              saqfTooltip="Eine gültige Abfrage Ordner klassifiziert Dokumente pro Sprache in Unterordner namens DE, EN und ES.";
              selectlang="Wählen Sie die Sprache der Interface: ";
        	  refreshgermanindex="Aktualisieren Sie die Deutsch-Index";
        	  refreshspanishindex="Aktualisieren Sie die Spanisch-Index";
        	  refreshenglishindex="Aktualisieren Sie die Englisch-Index";
        	  refreshLSITooltip="Die Anzahl der semantischen Dimensionen muss niedriger sein als die Anzahl der Dokumente in den Trainingsdaten.";
        	  settings="Einstellungen";
        	  numSemDim="Anzahl der semantischen Dimensionen:";
        	  about="Weitere Infos";
              aboutText="Entwickelt von:\nGabriel Campero gabrielcampero@acm.org\n\nIndividuelle Forschungsprojekt: Arbeitsgruppe DKE\nWinter Semester 2014/2015\n\nFacultät für Informatik, Otto-von-Güericke Universität, Magdeburg\n\nWeitere Infos: https://github.com/gabrielcc2/AStudyOnCrossLanguageInformationRetrievalSupportForAResearchPaperRecommender";;	 
          }
          else if (interfaceLanguage.equals("ES")){
        	  usedefaultqf="Usar directorio por defecto";
        	  refresh="Actualizar el ";
        	  submit="Aceptar";
        	  saqf="Seleccionar otro directorio para la búsqueda";
        	  saqfTooltip="Un directorio de búsqueda válido clasifica los documentos por lenguaje, en sub-directorios llamados DE, EN y ES.";
        	  refreshLSITooltip="El número de dimensiones semánticas debe ser menor al número de documentos y palabras en el training data.";
        	  selectlang="Seleccionar lenguaje de interfaz gráfica: ";
        	  refreshgermanindex="Actualizar el índice Alemán";
        	  refreshspanishindex="Actualizar el índice hispano";
        	  refreshenglishindex="Actualizar el índice en Inglés";
        	  settings="Ajustes";
        	  numSemDim="Número de dimensiones semánticas:";
        	  about="Aprende más";
        	  aboutText="Desarrollado por:\nGabriel Campero gabrielcampero@acm.org\n\nProjecto de investigación: DKE\nSemestre de Invierno 2014/2015\n\nFacultad de Informática, Universidad de Magdeburgo, Otto-von-Güericke\n\nMás información: https://github.com/gabrielcc2/AStudyOnCrossLanguageInformationRetrievalSupportForAResearchPaperRecommender";
          }
          else{	  
        	  usedefaultqf="Use default query folder";
        	  refresh="Refresh ";
        	  submit="Submit";
        	  saqf="Select another query folder";
        	  saqfTooltip="A valid query folder classifies the documents according to languages, in sub-folders named DE, EN and ES, respectively.";
        	  refreshLSITooltip="The number of semantic dimensions must be less than the number of documents and terms in the training data.";
        	  selectlang="Select language of interface: ";
        	  refreshgermanindex="Refresh German Index";
        	  refreshspanishindex="Refresh Spanish Index";
        	  refreshenglishindex="Refresh English Index";
        	  settings="Settings";
        	  numSemDim="Number of semantic dimensions:";
        	  about="About";
        	  aboutText="Developed by:\nGabriel Campero gabrielcampero@acm.org\n\nIndividual Research Project: DKE workgroup\nWinter Semester 2014/2015\n\nFaculty of Informatics, University of Magdeburg, Otto-von-Güericke\n\nMore information: https://github.com/gabrielcc2/AStudyOnCrossLanguageInformationRetrievalSupportForAResearchPaperRecommender";
          }
          jLabel2.setText(numSemDim);
          jButton3.setText(submit);
          jButton5.setText(saqf);
          jButton5.setToolTipText(saqfTooltip);
          jButton7.setText(usedefaultqf);
          interfaceLanguageSelectorComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { english, german, spanish }));
          if (interfaceLanguage.equals("DE")){
              interfaceLanguageSelectorComboBox1.setSelectedItem(german);        	  
          }
          else if (interfaceLanguage.equals("ES")){
              interfaceLanguageSelectorComboBox1.setSelectedItem(spanish);        	  
          }
          else {
              interfaceLanguageSelectorComboBox1.setSelectedItem(english);        	  
          }
          
          jLabel7.setText(selectlang);
          refreshGermanIndexButton.setText(refreshgermanindex);
          refreshLSIButton.setText(refresh+"LSI");
          refreshLSIButton.setToolTipText(refreshLSITooltip);
          refreshSpanishIndexButton.setText(refreshspanishindex);
          refreshEnglishIndexButton.setText(refreshenglishindex);

          jSpinner2.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(3), Integer.valueOf(1), null, Integer.valueOf(1)));
          jSpinner2.setValue(3);
          
          interfaceLanguageSelectorComboBox1.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jComboBox1ActionPerformed(evt);
              }
          });

          
          jButton3.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jButton3ActionPerformed(evt);
              }
          });

          
          jButton5.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  selectNewQueryFolder(evt);
              }
          });

          jButton7.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  selectDefaultQueryFolder(evt);
              }
          });

          interfaceLanguageSelectorComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { english, german, spanish }));
          if (interfaceLanguage.equals("DE")){
              interfaceLanguageSelectorComboBox1.setSelectedItem(german);        	  
          }
          else if (interfaceLanguage.equals("ES")){
              interfaceLanguageSelectorComboBox1.setSelectedItem(spanish);        	  
          }
          else {
              interfaceLanguageSelectorComboBox1.setSelectedItem(english);        	  
          }

          interfaceLanguageSelectorComboBox1.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jComboBox1ActionPerformed(evt);
              }
          });

          refreshGermanIndexButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  refreshGermanIndex(evt);
              }
          });

          refreshLSIButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  refreshLSI(evt);
              }
          });

          refreshSpanishIndexButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  refreshSpanishIndex(evt);
              }
          });

          refreshEnglishIndexButton.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  refreshEnglishIndex(evt);
              }
          });

          /*Visual configuration for Panel with Settings tab*/
          javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
          jPanel2.setLayout(jPanel2Layout);
          jPanel2Layout.setHorizontalGroup(
              jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addGroup(jPanel2Layout.createSequentialGroup()
                          .addComponent(currentQueryFolderLabel)
                          .addGap(0, 0, Short.MAX_VALUE))
                      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                          .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(jPanel2Layout.createSequentialGroup()
                                  .addComponent(jButton7)
                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 359, Short.MAX_VALUE))
                              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                  .addGap(0, 0, Short.MAX_VALUE)
                                  .addComponent(jLabel2)
                                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                  .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                  .addGap(15, 15, 15)))
                          .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addComponent(refreshLSIButton)
                              .addComponent(jButton5)))
                      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                          .addGap(0, 0, Short.MAX_VALUE)
                          .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                              .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                  .addComponent(jLabel7)
                                  .addGap(18, 18, 18)
                                  .addComponent(interfaceLanguageSelectorComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                  .addGap(18, 18, 18)
                                  .addComponent(jButton3))
                              .addComponent(refreshGermanIndexButton, javax.swing.GroupLayout.Alignment.TRAILING)
                              .addComponent(refreshEnglishIndexButton, javax.swing.GroupLayout.Alignment.TRAILING)
                              .addComponent(refreshSpanishIndexButton, javax.swing.GroupLayout.Alignment.TRAILING))))
                  .addContainerGap())
          );
          jPanel2Layout.setVerticalGroup(
              jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel2Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(currentQueryFolderLabel)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                      .addComponent(jButton7)
                      .addComponent(jButton5))
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 203, Short.MAX_VALUE)
                  .addComponent(refreshGermanIndexButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(refreshEnglishIndexButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(refreshSpanishIndexButton)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                      .addComponent(refreshLSIButton)
                      .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabel2))
                  .addGap(25, 25, 25)
                  .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                      .addComponent(jButton3)
                      .addComponent(interfaceLanguageSelectorComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                      .addComponent(jLabel7))
                  .addContainerGap())
          );
          jTabbedPane1.addTab(settings, jPanel2);

          
          /**Configuration for elements of the About tab*/
          jTextArea2.setEditable(false);
          jTextArea2.setColumns(20);
          jTextArea2.setRows(5);
          jTextArea2.setText(aboutText);
          jScrollPane3.setViewportView(jTextArea2);

          /**Visual configuration for Panel with "About tab" */
          
          javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
          jPanel5.setLayout(jPanel5Layout);
          jPanel5Layout.setHorizontalGroup(
              jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel5Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 761, Short.MAX_VALUE)
                  .addContainerGap())
          );
          jPanel5Layout.setVerticalGroup(
              jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel5Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addContainerGap(82, Short.MAX_VALUE))
          );

          jTabbedPane1.addTab(about, jPanel5);

          jPanel4.setBackground(java.awt.Color.white);

          if (interfaceLanguage.equals("DE")){
        	  jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clir/view/images/CLIRTipsLogo_DE.png"))); // NOI18N
          }
          else if (interfaceLanguage.equals("ES")){
        	  jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clir/view/images/CLIRTipsLogo_ES.png"))); // NOI18N
          }
          else{
        	  jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clir/view/images/CLIRTipsLogo_EN.png"))); // NOI18N
          }
          
          javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
          jPanel4.setLayout(jPanel4Layout);
          jPanel4Layout.setHorizontalGroup(
              jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel4Layout.createSequentialGroup()
                  .addComponent(jLabel1)
                  .addGap(0, 0, Short.MAX_VALUE))
          );
          jPanel4Layout.setVerticalGroup(
              jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel4Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                  .addContainerGap())
          );

          javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
          jPanel1.setLayout(jPanel1Layout);
          jPanel1Layout.setHorizontalGroup(
              jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                  .addContainerGap()
                  .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                      .addComponent(jTabbedPane1)
                      .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                  .addContainerGap())
          );
          jPanel1Layout.setVerticalGroup(
              jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addGroup(jPanel1Layout.createSequentialGroup()
                  .addContainerGap()
                  .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                  .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                  .addComponent(jTabbedPane1)
                  .addContainerGap())
          );

          javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
          getContentPane().setLayout(layout);
          layout.setHorizontalGroup(
              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          );
          layout.setVerticalGroup(
              layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
              .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
          );

          pack();
      }// </editor-fold>//GEN-END:initComponents

      /**
       * J button3 action performed.
       *
       * @param evt the evt
       */
      private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    	  String option= interfaceLanguageSelectorComboBox1.getSelectedItem().toString();
    	  if (option.isEmpty()){
    		  interfaceLanguage="EN";
    		  changeLanguage();
    	  }
    	  else if (option.equals(german)){
    		  interfaceLanguage="DE";
    		  changeLanguage();
    	  }
    	  else if (option.equals(spanish)){
    		  interfaceLanguage="ES";
    		  changeLanguage();
    	  }
    	  else{
    		  interfaceLanguage="EN";
    		  changeLanguage();
    	  }
   
      }//GEN-LAST:event_jButton3ActionPerformed
      
      /**
       * Change language.
       */
      @SuppressWarnings({ "unchecked", "rawtypes" })
	private void changeLanguage(){
    	  if (interfaceLanguage.equals("DE")){
        	  qfu="Abfrageordner:";
        	  results= "Ergebnisse";
        	  sourceLangs="Ausgangssprachen:";
        	  if (queryFolder.equals("DEFAULT")){
        		  resultingQfu="Default";
        	  }
        	  targetLangs="Zielsprachen:";
        	  getRec="Empfehlungen bekommen";
        	  german="Deutsch";
        	  english="Englisch";
        	  spanish="Spanisch";
        	  refine="Verfeinerung der Abfrage";
        	  uselsi="Verwenden LSI";
        	  resultsText=getResultsText();
          }
          else if (interfaceLanguage.equals("ES")){
        	  qfu="Directorio utilizado para la búsqueda:";
        	  results= "Resultados";
              sourceLangs="Lenguajes originales:";
              if (queryFolder.equals("DEFAULT")){
            	  resultingQfu="Directorio por defecto";
              }
              targetLangs="Languajes meta:";
        	  getRec="Obtener recomendaciones";
        	  german="Alemán";
        	  english="Inglés";
        	  spanish="Español";
        	  refine="Refinar la búsqueda";
        	  uselsi="Usar LSI";
        	  resultsText=getResultsText();
          }
          else{
        	  qfu="Query folder:";
        	  results= "Results";
              sourceLangs="Source langugages:";
              if (queryFolder.equals("DEFAULT")){
            	  resultingQfu="Default";
              }
        	  targetLangs="Target languages:";
        	  getRec="Get recommendations";
        	  german="German";
        	  english="English";
        	  spanish="Spanish";
        	  refine="Refine query terms";
        	  uselsi="Use LSI";
        	  resultsText=getResultsText();
          }
          resultsLabel.setText(results+" | "+qfu+" "+resultingQfu);
          currentQueryFolderLabel.setText(qfu+" "+resultingQfu);
          jLabel17.setText(targetLangs);
          jLabel12.setText(sourceLangs);
          jScrollPane2.setViewportView(resultsTextArea);   
          resultsTextArea.setText(resultsText);
	      resultsTextArea.setCaretPosition(0);
          queryInGerman.setText(german);
          queryInEnglish.setText(english);
          queryInSpanish.setText(spanish);
          jCheckBox2.setText(uselsi);
          refineRecommendationsButton.setText(refine);
          getRecommendationsButton.setText(getRec);
          resultsInSpanish.setText(spanish);
          resultsInEnglish.setText(english);
          resultsInGerman.setText(german);
          jTabbedPane1.setTitleAt(0, getRec);
          if (interfaceLanguage.equals("DE")){
        	  usedefaultqf="Verwenden den Defaultabfrageordner";
        	  refresh="Aktualisieren Sie die ";
        	  submit="Annehmen";
        	  saqf="Wählen Sie ein anderes Abfrageordner";
              saqfTooltip="Eine gültige Abfrage Ordner klassifiziert Dokumente pro Sprache in Unterordner namens DE, EN und ES.";
        	  refreshLSITooltip="Die Anzahl der semantischen Dimensionen muss niedriger sein als die Anzahl der Dokumente in den Trainingsdaten.";
        	  selectlang="Wählen Sie die Sprache der Interface: ";
        	  refreshgermanindex="Aktualisieren Sie die Deutsch-Index";
        	  refreshspanishindex="Aktualisieren Sie die Spanisch-Index";
        	  refreshenglishindex="Aktualisieren Sie die Englisch-Index";
        	  settings="Einstellungen";
        	  numSemDim="Anzahl der semantischen Dimensionen:";
        	  about="Weitere Infos";
              aboutText="Entwickelt von:\nGabriel Campero gabrielcampero@acm.org\n\nIndividuelle Forschungsprojekt: Arbeitsgruppe DKE\nWinter Semester 2014/2015\n\nFacultät für Informatik, Otto-von-Güericke Universität, Magdeburg\n\nWeitere Infos: https://github.com/gabrielcc2/AStudyOnCrossLanguageInformationRetrievalSupportForAResearchPaperRecommender";;	 
          }
          else if (interfaceLanguage.equals("ES")){
        	  usedefaultqf="Usar directorio por defecto";
        	  refresh="Actualizar el ";
        	  submit="Aceptar";
        	  saqf="Seleccionar otro directorio para la búsqueda";
        	  saqfTooltip="Un directorio de búsqueda válido clasifica los documentos por lenguaje, en sub-directorios llamados DE, EN y ES.";
        	  refreshLSITooltip="El número de dimensiones semánticas debe ser menor al número de documentos y palabras en el training data.";
        	  selectlang="Seleccionar lenguaje de interfaz gráfica: ";
        	  refreshgermanindex="Actualizar el índice Alemán";
        	  refreshspanishindex="Actualizar el índice hispano";
        	  refreshenglishindex="Actualizar el índice en Inglés";
        	  numSemDim="Número de dimensiones semánticas:";
        	  settings="Ajustes";
        	  about="Aprende más";
        	  aboutText="Desarrollado por:\nGabriel Campero gabrielcampero@acm.org\n\nProjecto de investigación: DKE\nSemestre de Invierno 2014/2015\n\nFacultad de Informática, Universidad de Magdeburgo, Otto-von-Güericke\n\nMás información: https://github.com/gabrielcc2/AStudyOnCrossLanguageInformationRetrievalSupportForAResearchPaperRecommender";
          }
          else{	  
        	  usedefaultqf="Use default query folder";
        	  refresh="Refresh ";
        	  submit="Submit";
        	  saqf="Select another query folder";
        	  saqfTooltip="A valid query folder classifies the documents according to languages, in sub-folders named DE, EN and ES, respectively.";        	  refreshLSITooltip="The number of semantic dimensions must be less than the number of documents and terms in the training data.";
        	  selectlang="Select language of interface: ";
        	  refreshgermanindex="Refresh German Index";
        	  refreshspanishindex="Refresh Spanish Index";
        	  refreshenglishindex="Refresh English Index";
        	  numSemDim="Number of semantic dimensions:";
        	  settings="Settings";
        	  about="About";
        	  aboutText="Developed by:\nGabriel Campero gabrielcampero@acm.org\n\nIndividual Research Project: DKE workgroup\nWinter Semester 2014/2015\n\nFaculty of Informatics, University of Magdeburg, Otto-von-Güericke\n\nMore information: https://github.com/gabrielcc2/AStudyOnCrossLanguageInformationRetrievalSupportForAResearchPaperRecommender";
          }
          jLabel2.setText(numSemDim);
          jButton3.setText(submit);
          jButton5.setText(saqf);
          jButton5.setToolTipText(saqfTooltip);
          jButton7.setText(usedefaultqf);
          interfaceLanguageSelectorComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { english, german, spanish }));
          if (interfaceLanguage.equals("DE")){
              interfaceLanguageSelectorComboBox1.setSelectedItem(german);        	  
          }
          else if (interfaceLanguage.equals("ES")){
              interfaceLanguageSelectorComboBox1.setSelectedItem(spanish);        	  
          }
          else {
              interfaceLanguageSelectorComboBox1.setSelectedItem(english);        	  
          }

          interfaceLanguageSelectorComboBox1.addActionListener(new java.awt.event.ActionListener() {
              public void actionPerformed(java.awt.event.ActionEvent evt) {
                  jComboBox1ActionPerformed(evt);
              }
          });
          
          jLabel7.setText(selectlang);
          refreshGermanIndexButton.setText(refreshgermanindex);
          refreshLSIButton.setText(refresh+"LSI");
          refreshLSIButton.setToolTipText(refreshLSITooltip);
          refreshSpanishIndexButton.setText(refreshspanishindex);
          refreshEnglishIndexButton.setText(refreshenglishindex);
          jTabbedPane1.setTitleAt(1, settings);
          jTextArea2.setText(aboutText);
          jTabbedPane1.setTitleAt(2, about);   
          
          if (interfaceLanguage.equals("DE")){
        	  jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clir/view/images/CLIRTipsLogo_DE.png"))); // NOI18N
          }
          else if (interfaceLanguage.equals("ES")){
        	  jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clir/view/images/CLIRTipsLogo_ES.png"))); // NOI18N
          }
          else{
        	  jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/clir/view/images/CLIRTipsLogo_EN.png"))); // NOI18N
          }

      }
      
      /**
       * Select new query folder.
       *
       * @param evt the evt
       */
      private void selectNewQueryFolder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
          // TODO add your handling code here:
    	  //Select another query folder...
      	javax.swing.JFileChooser jFileChooser1 = new javax.swing.JFileChooser(){
    	public void approveSelection(){
        		super.approveSelection();
            	queryFolder=getSelectedFile().getPath();//Function to set the new query folder.
            	resultingQfu=queryFolder;
           	 	resultsLabel.setText(results+" | "+qfu+" "+resultingQfu);
                currentQueryFolderLabel.setText(qfu+" "+resultingQfu);
           	 	this.setVisible(false);
           	 	this.setVisible(true);

        	}
        };
        
        jFileChooser1.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
    	jFileChooser1.showOpenDialog(this); //Now we show the file chooser
        
      }//GEN-LAST:event_jButton5ActionPerformed

      /**
       * Select default query folder.
       *
       * @param evt the evt
       */
      private void selectDefaultQueryFolder(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
          // TODO add your handling code here:
    	  queryFolder="DEFAULT";
    	  if (interfaceLanguage.equals("DE")){
        	  resultingQfu="Default";
          }
          else if (interfaceLanguage.equals("ES")){
              resultingQfu="Directorio por defecto";
          }
          else{
           	  resultingQfu="Default";
          }
    	  resultsLabel.setText(results+" | "+qfu+" "+resultingQfu);

    	  currentQueryFolderLabel.setText(qfu+" "+resultingQfu);   
    	  
      }//GEN-LAST:event_jButton7ActionPerformed

      /**
       * Gets the recommendations.
       *
       * @param evt the evt
       * @return the recommendations
       */
      private void getRecommendations(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    	  List<String> expectedLanguages= new ArrayList<String>();
    	  List<String> queryLanguages= new ArrayList<String>();
    	  if(queryInGerman.isSelected()){
    		  queryLanguages.add("DE");
    	  }
    	  if(queryInEnglish.isSelected()){
    		  queryLanguages.add("EN");
    	  }
    	  if(queryInSpanish.isSelected()){
    		  queryLanguages.add("ES");
    	  }
    	  
    	  if(resultsInGerman.isSelected()){
    		  expectedLanguages.add("DE");
    	  }
    	  if(resultsInEnglish.isSelected()){
    		  expectedLanguages.add("EN");
    	  }
    	  if(resultsInSpanish.isSelected()){
    		  expectedLanguages.add("ES");
    	  }
    	  
    	  if (!expectedLanguages.isEmpty()&&!queryLanguages.isEmpty()){
    		  String folder=queryFolder;
    		  if (jCheckBox2.isSelected()){
  				recommendations.assign(
							RecommendationsHandler.getInstance().getRecommendationsLSA(
									queryLanguages,
									expectedLanguages, 
									folder,
									10));
    		  }
    		  else{
    				recommendations.assign(
							RecommendationsHandler.getInstance().getRecommendations(
									queryLanguages,
									expectedLanguages,
									folder,
									10, true, "google", true, true));
    		 }
    		 resultsText=getResultsText();
  	    	 resultsTextArea.setText(resultsText);
  	    	 resultsTextArea.setCaretPosition(0);
    		  //This is only executed if returning results
  	    	  if (!recommendations.isEmpty()){
  	    	    if (!recommendations.getUsedLSI()){
                  	refineRecommendationsButton.setEnabled(true);
        	  	}
        	  	else{
        		  	refineRecommendationsButton.setEnabled(false);
        	  	}
        	  }
  	    	  else{
  	    		refineRecommendationsButton.setEnabled(false);
  	    	  }
    	  }
    	  else{
        	  //If no query languages defined or no expected languages do nothing, the user should be able to figure it out.
    	  }
    	  
      }//GEN-LAST:event_jButton4ActionPerformed

      /**
       * J radio button1 action performed.
       *
       * @param evt the evt
       */
      private void jRadioButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton1ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jRadioButton1ActionPerformed

      /**
       * J radio button2 action performed.
       *
       * @param evt the evt
       */
      private void jRadioButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jRadioButton2ActionPerformed

      /**
       * J radio button3 action performed.
       *
       * @param evt the evt
       */
      private void jRadioButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton2ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jRadioButton3ActionPerformed

      /**
       * J radio button4 action performed.
       *
       * @param evt the evt
       */
      private void jRadioButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton4ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jRadioButton4ActionPerformed

      /**
       * J radio button5 action performed.
       *
       * @param evt the evt
       */
      private void jRadioButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jRadioButton5ActionPerformed
      
      /**
       * J radio button6 action performed.
       *
       * @param evt the evt
       */
      private void jRadioButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButton5ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jRadioButton6ActionPerformed

      /**
       * Gets the results text.
       *
       * @return the results text
       */
      private String getResultsText(){
    	  if (recommendations.isEmpty()){
    		  if (interfaceLanguage.equals("DE")){
    			  return "Keine Empfehlungen gefunden.";
    		  }
    		  else if (interfaceLanguage.equals("ES")){
    			  return "No se encontraron recomendaciones.";
    		  }
    		  else{
    			  return "No recommendations found.";
    		  }
    	  }
    	  String resultStr="";
    	  if (recommendations.getUsedLSI()){
    		  	if (interfaceLanguage.equals("DE")){
    		  		resultStr+="Empfehlungen mit LSA produziert:<br>";
				}
    		  	if (interfaceLanguage.equals("ES")){
    		  		resultStr+="Recomendaciones producidas usando LSA:<br>";
				}
    		  	else {
    		  		resultStr+="Recommendations produced using LSA:<br>";
				}
			}
			else{
				if (interfaceLanguage.equals("DE")){
    		  		resultStr+="Empfehlungen mit Automatische Abfrage Übersetzung und weitere Verbesserungen produziert:<br>";
				}
    		  	if (interfaceLanguage.equals("ES")){
    		  		resultStr+="Recomendaciones producidas usando traducción automática de la búsqueda y otras mejoras:<br>";
				}
    		  	else {
    		  		resultStr+="Recommendations produced using automatic query translation and further improvements:<br>";
				}
			}
			if (interfaceLanguage.equals("DE")){
		  		resultStr+="Anzahl der Ergebnisse: "+recommendations.getPaperHits().get(0).getNumOfResults()+"<br>";
			}
		  	if (interfaceLanguage.equals("ES")){
				resultStr+="Número de resultados: "+recommendations.getPaperHits().get(0).getNumOfResults()+"<br>";
			}
		  	else {
				resultStr+="Number of hits: "+recommendations.getPaperHits().get(0).getNumOfResults()+"\n";
			}
			for (int i=0; i<recommendations.getPaperHits().size(); i++){
				resultStr+="<br>----------------------------------------------------------<br>";
				String paperHit="";
				if (interfaceLanguage.equals("DE")){
					paperHit="Pos: "+recommendations.getPaperHits().get(i).getRank().toString();
					paperHit+="<br> Titel: "+recommendations.getPaperHits().get(i).getTitle()+
					"<br> Url: "+"<a href=\""+recommendations.getPaperHits().get(i).getUrl()+
					"\">"+recommendations.getPaperHits().get(i).getUrl()+"</a>"+
					"<br> Relevanz-Auswertung: "+recommendations.getPaperHits().get(i).getRelevanceScore();
				}
				else if (interfaceLanguage.equals("ES")){
					paperHit="Rango: "+recommendations.getPaperHits().get(i).getRank().toString();
					paperHit+="<br> Título: "+recommendations.getPaperHits().get(i).getTitle()+
					"<br> Url: "+"<a href=\""+recommendations.getPaperHits().get(i).getUrl()+
					"\">"+recommendations.getPaperHits().get(i).getUrl()+"</a>"+
					"<br> Índice de relevancia: "+recommendations.getPaperHits().get(i).getRelevanceScore();					
				}
				else{
					paperHit="Rank: "+recommendations.getPaperHits().get(i).getRank().toString();
					paperHit+="<br> Title: "+recommendations.getPaperHits().get(i).getTitle()+
					"<br> Url: "+"<a href=\""+"file:"+recommendations.getPaperHits().get(i).getUrl()+
					"\">"+recommendations.getPaperHits().get(i).getUrl()+"</a>"+
					"<br> Relevance Score: "+recommendations.getPaperHits().get(i).getRelevanceScore();
				}
				resultStr+=paperHit+"<br>";
			}
			resultStr+="<br>----------------------------------------------------------<br>";
			return resultStr;
      }
      
      /**
       * Refine recommendations.
       *
       * @param evt the evt
       */
      private void refineRecommendations(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
    	  
    		
        	
    	  class RefineQueryTermsDialog extends javax.swing.JDialog {

    		  
  		  	private UndoManager undoManagerGermanTerms;
		  	private UndoManager undoManagerEnglishTerms;
		  	private UndoManager undoManagerSpanishTerms;
    		    /**
    		     * Creates new form ListOfTextUI
    		     */
    		  
    		    public RefineQueryTermsDialog(java.awt.Frame parent, boolean modal, String germanTerms, String englishTerms, String spanishTerms, String interfaceLanguage) {
    		        super(parent, modal);
    		        initComponents(germanTerms, englishTerms, spanishTerms, interfaceLanguage);
    		    }

    		    /**
    		     * This method is called from within the constructor to initialize the form.
    		     * WARNING: Do NOT modify this code. The content of this method is always
    		     * regenerated by the Form Editor.
    		     */
    		    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    		    private void initComponents(String germanTerms, String englishTerms, String spanishTerms, String interfaceLanguage) {


    		        jButton1 = new javax.swing.JButton();//Ok
    		    

    		        jLabel2 = new javax.swing.JLabel(); //DE
    		        jLabel1 = new javax.swing.JLabel();//EN
    		        jLabel5 = new javax.swing.JLabel(); //ES
    		        jTextArea1 = new javax.swing.JTextArea(); //GermanTerms
    		        jScrollPane1 = new javax.swing.JScrollPane();//Scroll for GermanTerms
    		        jTextArea3 = new javax.swing.JTextArea(); //EnglishTerms
    		        jScrollPane9 = new javax.swing.JScrollPane();//Scroll for EnglishTerms
    		        jTextArea4 = new javax.swing.JTextArea();   //SpanishTerms 		        
       		        jScrollPane10 = new javax.swing.JScrollPane(); //Scroll for SpanishTerms
    		        undoManagerGermanTerms= new UndoManager();
    		        undoManagerSpanishTerms= new UndoManager();
    		        undoManagerEnglishTerms= new UndoManager();

    		        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

    		        if (interfaceLanguage.equals("DE")){
    		        	setTitle("Verfeinerung der Abfrage");
    		        	jLabel1.setText("Abfragewörter auf Englisch:");
    		        	jLabel2.setText("Abfragewörter auf Deutsch:");
    		        	jLabel5.setText("Abfragewörter auf Spanisch:");
    		        }
    		        else if (interfaceLanguage.equals("ES")){
    		        	setTitle("Refinar los términos de búsqueda");
    		        	jLabel1.setText("Términos de búsqueda en inglés:");
    		        	jLabel2.setText("Terminos de búsqueda en alemán:");
    		        	jLabel5.setText("Términos de búsqueda en español:");
    		        }
    		        else {
    		        	setTitle("Refine the query terms");
    		        	jLabel1.setText("English query terms:");
    		        	jLabel2.setText("German query terms:");
    		        	jLabel5.setText("Spanish query terms:");
    		        }
    		        

    		        jTextArea1.setColumns(20);
    		        jTextArea1.setRows(5);
    		        jTextArea1.setLineWrap(true);
    		        jTextArea3.setColumns(20);
    		        jTextArea3.setRows(5);
    		        jTextArea3.setLineWrap(true);
    		        jTextArea4.setColumns(20);
    		        jTextArea4.setRows(5);
    		        jTextArea4.setLineWrap(true);

    		        
    		        jButton1.setText("Ok");
    		        jButton1.addActionListener(new java.awt.event.ActionListener() {
    		        	@Override
    		        	public void actionPerformed(java.awt.event.ActionEvent evt) {
    		        		  List<String> newTerms = new ArrayList<String>();
    		        		  List<String> langs= new ArrayList<String>();
    		        		  if (jTextArea1.getText().length()>1){
    		        			  newTerms.add(jTextArea1.getText());
    		        			  langs.add("DE");
    		        		  }
    		        		  if (jTextArea3.getText().length()>1){
    		        			  newTerms.add(jTextArea3.getText());
    		        			  langs.add("EN");
    		        		  }
    		        		  if (jTextArea4.getText().length()>1){
    		        			  newTerms.add(jTextArea4.getText());
    		        			  langs.add("ES");
    		        		  }
    		        		  QueryTerms aux = new QueryTerms(newTerms, langs);
    		        		  
    		        		  recommendations.assign(
    									RecommendationsHandler.getInstance().refineQuery(aux, 10, true));

    		    		 resultsText=getResultsText();
    		  	    	 resultsTextArea.setText(resultsText);
    		  	    	 resultsTextArea.setCaretPosition(0);
    		    		  //This is only executed if returning results
    		                  	refineRecommendationsButton.setEnabled(true);
   
    		        		  
    		            	  RefineQueryTermsDialog.this.setVisible(false);
    		            	  RefineQueryTermsDialog.this.dispatchEvent(new WindowEvent(
    		            	  RefineQueryTermsDialog.this, WindowEvent.WINDOW_CLOSING));
    		              }
    		          });
    		        
    		        jTextArea1.setText(germanTerms);
    		        jTextArea1.setCaretPosition(0);
    		        jTextArea1.addMouseListener(new MouseAdapter() {  //Allowing to cut, copy and paste text...
    		            public void mouseReleased(final MouseEvent e) { 
    		                if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
    		                		){  
    		                    final JPopupMenu menu = new JPopupMenu();  
    		                    JMenuItem item;  
    		                   	final JTextComponent component = (JTextComponent)e.getComponent(); 
    		                    item = new JMenuItem(new DefaultEditorKit.CopyAction());
    		                    item.setText("Copy");  
    		                    item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
    		                    menu.add(item);  
    		                    item = new JMenuItem(new DefaultEditorKit.CutAction());  
    		                    item.setText("Cut");  
    		                    item.setEnabled(component.isEditable() && component.getSelectionStart() != component.getSelectionEnd());  
    		                    menu.add(item);  
    		                    item = new JMenuItem(new DefaultEditorKit.PasteAction());  
    		                    item.setText("Paste");  
    		                    item.setEnabled(component.isEditable());  
    		                    menu.add(item);  
    		                    menu.show(e.getComponent(), e.getX(), e.getY()); 
    		                }  
    		            }  
    		        });
    		        /**Adding undo and redo to query*/
    		        Document germanTermsAsDoc= jTextArea1.getDocument();
    		        germanTermsAsDoc.addUndoableEditListener(new UndoableEditListener() {
    		            @Override
    		            public void undoableEditHappened(UndoableEditEvent e) {
    		                undoManagerGermanTerms.addEdit(e.getEdit());

    		            }
    		        });
    		        InputMap im = jTextArea1.getInputMap(JComponent.WHEN_FOCUSED);
    		        ActionMap am = jTextArea1.getActionMap();

    		        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
    		        im.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");

    		        am.put("Undo", new AbstractAction() {
    		            @Override
    		            public void actionPerformed(ActionEvent e) {
    		                try {
    		                    if (undoManagerGermanTerms.canUndo()) {
    		                        undoManagerGermanTerms.undo();
    		                    }
    		                } catch (CannotUndoException exp) {
    		                    exp.printStackTrace();
    		                }
    		            }
    		        });
    		        am.put("Redo", new AbstractAction() {
    		            @Override
    		            public void actionPerformed(ActionEvent e) {
    		                try {
    		                    if (undoManagerGermanTerms.canRedo()) {
    		                        undoManagerGermanTerms.redo();
    		                    }
    		                } catch (CannotUndoException exp) {
    		                    exp.printStackTrace();
    		                }
    		            }
    		        });
    		        jScrollPane1.setViewportView(jTextArea1);

    		        jTextArea3.setText(englishTerms);
    		        jTextArea3.setCaretPosition(0);
    		        jTextArea3.addMouseListener(new MouseAdapter() {  //Allowing to cut, copy and paste text...
    		            public void mouseReleased(final MouseEvent e) { 
    		                if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
    		                		){  
    		                    final JPopupMenu menu = new JPopupMenu();  
    		                    JMenuItem item;  
    		                   	final JTextComponent component = (JTextComponent)e.getComponent(); 
    		                    item = new JMenuItem(new DefaultEditorKit.CopyAction());
    		                    item.setText("Copy");  
    		                    item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
    		                    menu.add(item);  
    		                    item = new JMenuItem(new DefaultEditorKit.CutAction());  
    		                    item.setText("Cut");  
    		                    item.setEnabled(component.isEditable() && component.getSelectionStart() != component.getSelectionEnd());  
    		                    menu.add(item);  
    		                    item = new JMenuItem(new DefaultEditorKit.PasteAction());  
    		                    item.setText("Paste");  
    		                    item.setEnabled(component.isEditable());  
    		                    menu.add(item);  
    		                    menu.show(e.getComponent(), e.getX(), e.getY()); 
    		                }  
    		            }  
    		        });
    		        /**Adding undo and redo to query*/
    		        Document englishTermsAsDoc= jTextArea3.getDocument();
    		        englishTermsAsDoc.addUndoableEditListener(new UndoableEditListener() {
    		            @Override
    		            public void undoableEditHappened(UndoableEditEvent e) {
    		                undoManagerEnglishTerms.addEdit(e.getEdit());

    		            }
    		        });
    		        InputMap im2 = jTextArea3.getInputMap(JComponent.WHEN_FOCUSED);
    		        ActionMap am2 = jTextArea3.getActionMap();

    		        im2.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
    		        im2.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");

    		        am2.put("Undo", new AbstractAction() {
    		            @Override
    		            public void actionPerformed(ActionEvent e) {
    		                try {
    		                    if (undoManagerEnglishTerms.canUndo()) {
    		                        undoManagerEnglishTerms.undo();
    		                    }
    		                } catch (CannotUndoException exp) {
    		                    exp.printStackTrace();
    		                }
    		            }
    		        });
    		        am.put("Redo", new AbstractAction() {
    		            @Override
    		            public void actionPerformed(ActionEvent e) {
    		                try {
    		                    if (undoManagerEnglishTerms.canRedo()) {
    		                        undoManagerEnglishTerms.redo();
    		                    }
    		                } catch (CannotUndoException exp) {
    		                    exp.printStackTrace();
    		                }
    		            }
    		        });
    		        jScrollPane9.setViewportView(jTextArea3);

    		        jTextArea4.setText(spanishTerms);
    		        jTextArea4.setCaretPosition(0);
    		        jTextArea4.addMouseListener(new MouseAdapter() {  //Allowing to cut, copy and paste text...
    		            public void mouseReleased(final MouseEvent e) { 
    		                if (e.isPopupTrigger() || (e.getModifiers() & InputEvent.BUTTON3_MASK) == InputEvent.BUTTON3_MASK
    		                		){  
    		                    final JPopupMenu menu = new JPopupMenu();  
    		                    JMenuItem item;  
    		                   	final JTextComponent component = (JTextComponent)e.getComponent(); 
    		                    item = new JMenuItem(new DefaultEditorKit.CopyAction());
    		                    item.setText("Copy");  
    		                    item.setEnabled(component.getSelectionStart() != component.getSelectionEnd());  
    		                    menu.add(item);  
    		                    item = new JMenuItem(new DefaultEditorKit.CutAction());  
    		                    item.setText("Cut");  
    		                    item.setEnabled(component.isEditable() && component.getSelectionStart() != component.getSelectionEnd());  
    		                    menu.add(item);  
    		                    item = new JMenuItem(new DefaultEditorKit.PasteAction());  
    		                    item.setText("Paste");  
    		                    item.setEnabled(component.isEditable());  
    		                    menu.add(item);  
    		                    menu.show(e.getComponent(), e.getX(), e.getY()); 
    		                }  
    		            }  
    		        });
    		        /**Adding undo and redo to query*/
    		        Document spanishTermsAsDoc= jTextArea4.getDocument();
    		        spanishTermsAsDoc.addUndoableEditListener(new UndoableEditListener() {
    		            @Override
    		            public void undoableEditHappened(UndoableEditEvent e) {
    		                undoManagerSpanishTerms.addEdit(e.getEdit());

    		            }
    		        });
    		        InputMap im3 = jTextArea4.getInputMap(JComponent.WHEN_FOCUSED);
    		        ActionMap am3 = jTextArea4.getActionMap();

    		        im3.put(KeyStroke.getKeyStroke(KeyEvent.VK_Z, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Undo");
    		        im3.put(KeyStroke.getKeyStroke(KeyEvent.VK_Y, Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()), "Redo");

    		        am3.put("Undo", new AbstractAction() {
    		            @Override
    		            public void actionPerformed(ActionEvent e) {
    		                try {
    		                    if (undoManagerSpanishTerms.canUndo()) {
    		                        undoManagerSpanishTerms.undo();
    		                    }
    		                } catch (CannotUndoException exp) {
    		                    exp.printStackTrace();
    		                }
    		            }
    		        });
    		        am.put("Redo", new AbstractAction() {
    		            @Override
    		            public void actionPerformed(ActionEvent e) {
    		                try {
    		                    if (undoManagerSpanishTerms.canRedo()) {
    		                        undoManagerSpanishTerms.redo();
    		                    }
    		                } catch (CannotUndoException exp) {
    		                    exp.printStackTrace();
    		                }
    		            }
    		        });
    		        jScrollPane10.setViewportView(jTextArea4);

    		        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    		        getContentPane().setLayout(layout);
    		        layout.setHorizontalGroup(
    		            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    		            .addGroup(layout.createSequentialGroup()
    		                .addContainerGap()
    		                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    		                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    		                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 585, Short.MAX_VALUE)
    		                    .addGroup(layout.createSequentialGroup()
    		                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    		                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
    		                                .addComponent(jButton1)
    		                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    		                                    .addComponent(jLabel2)
    		                                    .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)
    		                                    .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE)))
    		                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 574, javax.swing.GroupLayout.PREFERRED_SIZE))
    		                        .addGap(0, 0, Short.MAX_VALUE)))
    		                .addContainerGap())
    		        );
    		        layout.setVerticalGroup(
    		            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
    		            .addGroup(layout.createSequentialGroup()
    		                .addContainerGap()
    		                .addComponent(jLabel2)
    		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    		                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
    		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    		                .addComponent(jLabel1)
    		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    		                .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
    		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    		                .addComponent(jLabel5)
    		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    		                .addComponent(jScrollPane10, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
    		                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
    		                .addComponent(jButton1)
    		                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    		        );

    		        pack();
    		    }// </editor-fold>                        


    		    // Variables declaration - do not modify                     
    		    private javax.swing.JButton jButton1;
    		    private javax.swing.JLabel jLabel1;
    		    private javax.swing.JLabel jLabel2;
    		    private javax.swing.JLabel jLabel5;
    		    private javax.swing.JScrollPane jScrollPane9;
    		    private javax.swing.JScrollPane jScrollPane1;
    		    private javax.swing.JScrollPane jScrollPane10;
    		    private javax.swing.JTextArea jTextArea3;
    		    private javax.swing.JTextArea jTextArea1;
    		    private javax.swing.JTextArea jTextArea4;
    		    // End of variables declaration                   


    	  }
    	  
    	    java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    RefineQueryTermsDialog dialog = new RefineQueryTermsDialog(new javax.swing.JFrame(), true, recommendations.getQueryTerms().getTermsOfLang("DE"), 
                    		recommendations.getQueryTerms().getTermsOfLang("EN"),
                    		recommendations.getQueryTerms().getTermsOfLang("ES"), interfaceLanguage);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                           // System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                }
            });
      	  

      }//GEN-LAST:event_jButton9ActionPerformed

      /**
       * J check box2 action performed.
       *
       * @param evt the evt
       */
      private void jCheckBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox2ActionPerformed
          // TODO add your handling code here:
      }//GEN-LAST:event_jCheckBox2ActionPerformed

      /**
       * J combo box1 action performed.
       *
       * @param evt the evt
       */
      private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
      }//GEN-LAST:event_jComboBox1ActionPerformed

      /**
       * Refresh german index.
       *
       * @param evt the evt
       */
      private void refreshGermanIndex(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
    		LanguagesManager.getInstance().getSpecificManager("DE").createIndex(); 
  			JOptionPane optionPane = new JOptionPane();
  			if (interfaceLanguage.equals("DE")){
  				optionPane.setMessage("Deutsche-Index erstellt.");
  			}
  			else if (interfaceLanguage.equals("ES")){
  				optionPane.setMessage("Índice Alemán creado.");
  			}
  			else{
  				optionPane.setMessage("German index created.");
  			}
  			optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
            JDialog dialog = optionPane.createDialog(null, "Message");
            dialog.setVisible(true);
      }//GEN-LAST:event_jButton11ActionPerformed

      /**
       * Refresh lsi.
       *
       * @param evt the evt
       */
      private void refreshLSI(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
    		LanguagesManager.getInstance().createLSAIndex(LanguagesManager.getInstance().getLanguagesSupported(), Integer.valueOf(jSpinner2.getValue().toString())); 
  			JOptionPane optionPane = new JOptionPane();
  			if (interfaceLanguage.equals("DE")){
  				optionPane.setMessage("LS-Index erstellt.");
  			}
  			else if (interfaceLanguage.equals("ES")){
  				optionPane.setMessage("Índice LSI creado.");
  			}
  			else{
  				optionPane.setMessage("LSI index created.");
  			}
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
            JDialog dialog = optionPane.createDialog(null, "Message");
            dialog.setVisible(true);
      }//GEN-LAST:event_jButton13ActionPerformed

      /**
       * Refresh spanish index.
       *
       * @param evt the evt
       */
      private void refreshSpanishIndex(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
          // TODO add your handling code here:
  			LanguagesManager.getInstance().getSpecificManager("ES").createIndex(); 
  			JOptionPane optionPane = new JOptionPane();
  			if (interfaceLanguage.equals("DE")){
  				optionPane.setMessage("Spanisch-Index erstellt.");
  			}
  			else if (interfaceLanguage.equals("ES")){
  				optionPane.setMessage("Índice hispano creado.");
  			}
  			else{
  				optionPane.setMessage("Spanish index created.");
  			}            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
            JDialog dialog = optionPane.createDialog(null, "Message");
            dialog.setVisible(true);
      }//GEN-LAST:event_jButton14ActionPerformed

      /**
       * Refresh english index.
       *
       * @param evt the evt
       */
      private void refreshEnglishIndex(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton15ActionPerformed
          // TODO add your handling code here:
  			LanguagesManager.getInstance().getSpecificManager("EN").createIndex();
  			JOptionPane optionPane = new JOptionPane();
  			if (interfaceLanguage.equals("DE")){
  				optionPane.setMessage("Englisch-Index erstellt.");
  			}
  			else if (interfaceLanguage.equals("ES")){
  				optionPane.setMessage("Índice Inglés creado.");
  			}
  			else{
  				optionPane.setMessage("English index created.");
  			}
            optionPane.setMessageType(JOptionPane.INFORMATION_MESSAGE);
            JDialog dialog = optionPane.createDialog(null, "Message");
            dialog.setVisible(true);
      }//GEN-LAST:event_jButton15ActionPerformed

      /**
       * The main method.
       *
       * @param args the command line arguments
       */
      public static void main(String args[]) {
          /* Set the Nimbus look and feel */
          //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
          /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
           * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
           */
          try {
              for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                  if ("Nimbus".equals(info.getName())) {
                      javax.swing.UIManager.setLookAndFeel(info.getClassName());
                      break;
                  }
              }
          } catch (ClassNotFoundException ex) {
              java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (InstantiationException ex) {
              java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (IllegalAccessException ex) {
              java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          } catch (javax.swing.UnsupportedLookAndFeelException ex) {
              java.util.logging.Logger.getLogger(CLIRTipsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
          }
          //</editor-fold>

          /* Create and display the form */
          java.awt.EventQueue.invokeLater(new Runnable() {
              public void run() {
                  new CLIRTipsUI().setVisible(true);
              }
          });
      }

      // Variables declaration - do not modify//GEN-BEGIN:variables
      /** The refresh german index button. */
      private javax.swing.JButton refreshGermanIndexButton;
      
      /** The refresh lsi button. */
      private javax.swing.JButton refreshLSIButton;
      
      /** The refresh spanish index button. */
      private javax.swing.JButton refreshSpanishIndexButton;
      
      /** The refresh english index button. */
      private javax.swing.JButton refreshEnglishIndexButton;
      
      /** The j button3. */
      private javax.swing.JButton jButton3;
      
      /** The get recommendations button. */
      private javax.swing.JButton getRecommendationsButton;
      
      /** The j button5. */
      private javax.swing.JButton jButton5;
      
      /** The j button7. */
      private javax.swing.JButton jButton7;
      
      /** The refine recommendations button. */
      private javax.swing.JButton refineRecommendationsButton;
      
      /** The j check box2. */
      private javax.swing.JCheckBox jCheckBox2;
      
      /** The interface language selector combo box1. */
      @SuppressWarnings("rawtypes")
	  private javax.swing.JComboBox interfaceLanguageSelectorComboBox1;
      
      /** The j label1. */
      private javax.swing.JLabel jLabel1;
      
      /** The j label2. */
      private javax.swing.JLabel jLabel2;
      
      /** The j label12. */
      private javax.swing.JLabel jLabel12;
      
      /** The j label17. */
      private javax.swing.JLabel jLabel17;
      
      /** The current query folder label. */
      private javax.swing.JLabel currentQueryFolderLabel;
      
      /** The results label. */
      private javax.swing.JLabel resultsLabel;
      
      /** The j label7. */
      private javax.swing.JLabel jLabel7;
      
      /** The j panel1. */
      private javax.swing.JPanel jPanel1;
      
      /** The j panel2. */
      private javax.swing.JPanel jPanel2;
      
      /** The j panel3. */
      private javax.swing.JPanel jPanel3;
      
      /** The j panel4. */
      private javax.swing.JPanel jPanel4;
      
      /** The j panel5. */
      private javax.swing.JPanel jPanel5;
      
      /** The query in german. */
      private javax.swing.JRadioButton queryInGerman;
      
      /** The query in english. */
      private javax.swing.JRadioButton queryInEnglish;
      
      /** The query in spanish. */
      private javax.swing.JRadioButton queryInSpanish;
      
      /** The results in german. */
      private javax.swing.JRadioButton resultsInGerman;
      
      /** The results in english. */
      private javax.swing.JRadioButton resultsInEnglish;
      
      /** The results in spanish. */
      private javax.swing.JRadioButton resultsInSpanish;
      
      /** The j scroll pane2. */
      private javax.swing.JScrollPane jScrollPane2;
      
      /** The j scroll pane3. */
      private javax.swing.JScrollPane jScrollPane3;
      
      /** The j spinner2. */
      private javax.swing.JSpinner jSpinner2;
      
      /** The j tabbed pane1. */
      private javax.swing.JTabbedPane jTabbedPane1;
      
      /** The j text area2. */
      private javax.swing.JTextArea jTextArea2;
      
      /** The results text area. */
      private javax.swing.JTextPane resultsTextArea;
      
      /** The usedefaultqf. */
      String usedefaultqf;
      
      /** The refresh. */
      String refresh;
      
      /** The submit. */
      String submit;
      
      /** The saqf. */
      String saqf;
      
      /** The saqf tooltip. */
      String saqfTooltip;
      
      /** The selectlang. */
      String selectlang;
      
      /** The refreshgermanindex. */
      String refreshgermanindex;
      
      /** The refreshspanishindex. */
      String refreshspanishindex;
      
      /** The refreshenglishindex. */
      String refreshenglishindex;
      
      /** The settings. */
      String settings;
      
      /** The about. */
      String about;
      
      /** The about text. */
      String aboutText;
      
      /** The results. */
      String results;
      
      /** The source langs. */
      String sourceLangs;
      
      /** The target langs. */
      String targetLangs;
      
      /** The qfu. */
      String qfu;
      
      /** The resulting qfu. */
      String resultingQfu;
      
      /** The get rec. */
      String getRec;
      
      /** The german. */
      String german;
      
      /** The english. */
      String english;
      
      /** The spanish. */
      String spanish;
      
      /** The refine. */
      String refine;
      
      /** The uselsi. */
      String uselsi;
      
      /** The num sem dim. */
      String numSemDim;
      
      /** The refresh lsi tooltip. */
      String refreshLSITooltip;
      
      /** The results text. */
      String resultsText;
      // End of variables declaration//GEN-END:variables
}